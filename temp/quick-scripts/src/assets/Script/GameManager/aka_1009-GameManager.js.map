{"version":3,"sources":["assets/Script/GameManager/aka_1009-GameManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import EventEmitter = require('events');\n\nimport joinGameData from './aka_1009-JoinGameData';\nimport spinGameData from './aka_1009-SpinGameData2';\n\ndeclare global {\n    // eslint-disable-next-line no-var\n    var CHEAT_IDX: number;\n    // eslint-disable-next-line no-var\n    var CURRENT_IDX_SPIN_DATA: number;\n}\n\nglobalThis.CHEAT_IDX = -1;\n\nexport const GAME_MANAGER_EVENT = {\n    'START_GAME_SUCCESS' : 'start-game-success',\n    'NORMAL_GAME_RESULT' : 'normal-game-result',\n    'FREE_GAME_RESULT' : 'free-game-result',\n    'BONUS_GAME_RESULT' : 'bonus-game-result',\n\n    'JACKPOT_UPDATE': 'jackpot-update',\n    'JACKPOT_SHOW_MULTIPLE': 'jackpot_show_multiple',\n    'JACKPOT_HIDE_MULTIPLE' : 'jackpot_hide_multiple',\n    'PLAYER_MONEY_UPDATE' : 'player-money-update',\n    \n    'ERROR' : 'error',\n    'POPUP_INFO_MESSAGE' : 'popup-info-message',\n}\n\nexport class GameManager1009 {\n    protected _emitter: EventEmitter;\n    protected jackpotData: {[key:string]: JackpotInfo};\n    protected jackpotDataOrigin: {[key:string]: JackpotInfo};\n    protected jackpotMessage: {[key:string]: JackpotMessage};\n    protected playerMoney: number;\n    \n    protected currentSpinData: PlayerData1009[];\n    protected currentBetInfo: BetInfo;\n\n    static instance: GameManager1009 = null;\n    static getInstance(){\n        if(GameManager1009.instance === null){\n            GameManager1009.instance =  new GameManager1009();\n        }\n        return GameManager1009.instance;\n    }\n\n    constructor () {\n        this._emitter = new EventEmitter();\n\n        this.jackpotData = joinGameData.allJackpotInfos;\n        this.jackpotDataOrigin = JSON.parse(JSON.stringify(joinGameData.allJackpotInfos));\n        this.jackpotMessage = JSON.parse(JSON.stringify(joinGameData.message));\n        this.currentBetInfo = joinGameData.currentBetInfo;\n\n        this.playerMoney = 10000;\n    }\n\n    registerEvent(event: string, listener: (...args: unknown[]) => void) {\n        this._emitter.on(event, listener);\n    }\n\n    removeAllListeners(event: string) {\n        this._emitter.removeAllListeners(event);\n    }\n\n    removeAllEvent() {\n        this._emitter.removeAllListeners();\n    }\n\n    removeListener(event: string, listener: (...args: unknown[]) => void) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    startGame() {\n        const lastSpinData = this.getLastSpinData();\n\n        if (lastSpinData.idxSpinData >= 0) {\n            CHEAT_IDX = lastSpinData.idxSpinData;\n            this.currentSpinData = this.getNextCurrentSpinData();\n            this.currentSpinData.splice(0, this.currentSpinData.length - lastSpinData.lenRemainData - 1);\n            CHEAT_IDX = -1;\n            joinGameData.playerState = this.currentSpinData.splice(0,1)[0];\n        }\n\n\n        setTimeout(() => {\n            this._emitter.emit(GAME_MANAGER_EVENT.START_GAME_SUCCESS, joinGameData)\n        }, random(100, 500));\n    }\n\n    normalSpin(betId: string) {\n        this.showMessageJackpot();\n        // if (random(1, 100) <= 50)\n        // {\n        //     this.showMessageJackpot();\n        // }\n        // else\n        // {\n        //     this.hideMessageJackpot();\n        // }\n        //if (!this.currentSpinData || this.currentSpinData.length === 0) {\n            const foundBetInfo = joinGameData.betInfos.find((betInfo) => {\n                return betInfo.betId == betId;\n            })\n\n            this.currentBetInfo = foundBetInfo;\n\n            this.currentSpinData = this.getNextCurrentSpinData();\n            this.plusJackpot();\n            this.plusPlayerMoney(-foundBetInfo.betAmount)\n            setTimeout(() => {\n                const resultSpin: PlayerData1009 = this.currentSpinData.splice(0,1)[0];\n\n                this.checkWinJackpot(resultSpin);\n\n                this._emitter.emit(GAME_MANAGER_EVENT.NORMAL_GAME_RESULT, resultSpin);\n                this.storeLastSpinData(CURRENT_IDX_SPIN_DATA, this.currentSpinData.length);\n\n                this.checkFinishSession(resultSpin);\n            }, random(100, 500));\n\n        // } else {\n        //     setTimeout(() => {\n        //         this._emitter.emit(GAME_MANAGER_EVENT.ERROR, {code: 400});\n        //     }, random(100, 500));\n        // }\n    }\n\n    freeSpin() {\n        if (!this.currentSpinData || this.currentSpinData.length === 0) {\n            setTimeout(() => {\n                this._emitter.emit(GAME_MANAGER_EVENT.ERROR, {code: 400});\n            }, random(100, 500));\n        } else {\n            setTimeout(() => {\n                const resultSpin = this.currentSpinData.splice(0,1)[0];\n\n                this.checkWinJackpot(resultSpin);\n\n                this._emitter.emit(GAME_MANAGER_EVENT.FREE_GAME_RESULT, resultSpin);\n                this.storeLastSpinData(CURRENT_IDX_SPIN_DATA, this.currentSpinData.length);\n\n                this.checkFinishSession(resultSpin);\n            }, random(100, 500));\n        }\n    }\n\n    /**\n     * \n     * @param item: 1-12\n     */\n    bonusPlay(item: number) {\n        if (!this.currentSpinData || this.currentSpinData.length === 0) {\n            setTimeout(() => {\n                this._emitter.emit(GAME_MANAGER_EVENT.ERROR, {code: 400});\n            }, random(100, 500));\n        } else {\n            console.log('bonusPlay with item:', item);\n            setTimeout(() => { // bonus increasement index\n                const resultSpin = this.currentSpinData.splice(0,1)[0];\n                this._emitter.emit(GAME_MANAGER_EVENT.BONUS_GAME_RESULT, resultSpin);\n                this.storeLastSpinData(CURRENT_IDX_SPIN_DATA, this.currentSpinData.length);\n\n                this.checkFinishSession(resultSpin);\n            }, random(100, 500));\n        }\n    }\n\n    getJPHistory(from: number, size: number) : Promise<{\n        data: JPHistory[],\n        from: number,\n        size: number,\n        total: number,\n    }> {\n        const jpHistoryList: JPHistory[] = [];\n\n        var types = ['Jackpot','BigWin'];\n     \n        for (let i = 0; i < size; i++) {\n            jpHistoryList.push({\n                session: `#${2000 - (i + from)}`,\n                time: Date.now() - (i + from) * 3600 * 1000,\n                wonUser: `Nguyen van A${i + from}`,     \n                win: 50000000 + random(100000, 10000000),\n                type: types[Math.floor(Math.random() * types.length)]\n            })\n        }\n\n        const resultHistory: {\n            data: JPHistory[],\n            from: number,\n            size: number,\n            total: number,\n        } = {\n            from,\n            size,\n            total: 200,\n            data: jpHistoryList,\n        };\n        return Promise.resolve(resultHistory);\n    }\n\n    getBetHistory(from: number,size: number): Promise<{\n        data: BetHistory[],\n        from: number,\n        size: number,\n        total: number,\n    }>{\n        const betHistoryList: BetHistory[] = [];\n\n        for (let i = 0; i < size; i++) {\n            const betUnit = joinGameData.betInfos[random(0,5)].betAmount;\n            const lineBet = 20;\n            betHistoryList.push(\n                { \n                    session: `#${2000 - (i + from)}`,\n                    time: Date.now() - (i + from) * 3600 * 1000, \n                    betUnit, \n                    lineBet, \n                    totalBet: betUnit * lineBet, \n                    totalWin: random(100000, 10000000), \n                    lineWin: random(0, lineBet),\n                    spinData: [\"King\", \"King\", \"King\", \"King\", \"King\",\n                        \"King\", \"King\", \"King\", \"King\", \"King\",\n                        \"King\", \"King\", \"King\", \"King\", \"King\"]\n                }\n            )\n        }\n\n        const resultHistory: {\n            data: BetHistory[],\n            from: number,\n            size: number,\n            total: number,\n        } = {\n            from,\n            size,\n            total: 200,\n            data: betHistoryList,\n        };\n        return Promise.resolve(resultHistory);\n    }\n\n    getPlayerMoney(): number {\n        return this.playerMoney;\n    }\n\n    private checkWinJackpot(playerData: PlayerData1009) {\n        // if (playerData.info.jackpotPayLine && playerData.info.jackpotPayLine && playerData.info.jackpotPayLine.length > 0) {\n        //     this.resetJackpot();\n        // }\n    }\n\n    private checkFinishSession(playerData: PlayerData1009) {\n        if (playerData.isFinish) {\n            var win = playerData.datas[playerData.datas.length - 1].content.win;\n            console.warn('checkFinishSession: ', win);\n            if (win > 0) {\n                this.plusPlayerMoney(win);\n            }\n        }\n    }\n\n    private plusPlayerMoney(money: number) {\n        this.playerMoney += money;\n        this._emitter.emit(GAME_MANAGER_EVENT.PLAYER_MONEY_UPDATE, this.playerMoney);\n    }\n\n    private storeLastSpinData(idxSpinData: number, lenRemainData: number) {\n        localStorage.setItem('idxSpinData', idxSpinData.toString());\n        localStorage.setItem('lenRemainData', lenRemainData.toString());\n    }\n\n    private getLastSpinData(): {idxSpinData: number, lenRemainData: number} {\n        const idxSpinData = localStorage.getItem('idxSpinData') || '-1';\n        const lenRemainData = localStorage.getItem('lenRemainData') || '0';\n\n        return {\n            idxSpinData: parseInt(idxSpinData),\n            lenRemainData: parseInt(lenRemainData),\n        }\n    }\n\n    private getNextCurrentSpinData(): PlayerData1009[] {\n        var fakeDatas = spinGameData;\n        const idx = CHEAT_IDX >= 0 && CHEAT_IDX < fakeDatas.length ? CHEAT_IDX : random(0, fakeDatas.length-1);\n        globalThis.CURRENT_IDX_SPIN_DATA = idx;\n        return JSON.parse(JSON.stringify(fakeDatas[idx].data));\n    }\n\n    private plusJackpot() {\n        this.currentBetInfo.jackpotInfos.forEach(({jackpotId}) => {\n            this.jackpotData[jackpotId].jackpotAmount += 100;\n        })\n\n        setTimeout(() => {\n            this._emitter.emit(GAME_MANAGER_EVENT.JACKPOT_UPDATE, JSON.parse(JSON.stringify(this.jackpotData)));\n        }, 3000)\n    }\n\n    private showMessageJackpot()\n    {\n        setTimeout(() => {\n            this._emitter.emit(GAME_MANAGER_EVENT.JACKPOT_SHOW_MULTIPLE, JSON.parse(JSON.stringify(this.jackpotMessage)));\n        }, 300)\n    }\n\n    private hideMessageJackpot()\n    {\n        setTimeout(() => {\n            this._emitter.emit(GAME_MANAGER_EVENT.JACKPOT_HIDE_MULTIPLE, JSON.parse(JSON.stringify(this.jackpotMessage)));\n        }, 300)\n    }\n\n    private resetJackpot() {\n        this.currentBetInfo.jackpotInfos.forEach(({jackpotId}) => {\n            this.jackpotData[jackpotId] = JSON.parse(JSON.stringify(this.jackpotDataOrigin[jackpotId]));\n        })\n\n        setTimeout(() => {\n            this._emitter.emit(GAME_MANAGER_EVENT.JACKPOT_UPDATE, JSON.parse(JSON.stringify(this.jackpotData)));\n        }, 300)\n    }\n}\n\nfunction random(min: number, max: number) {\n    return Math.round(Math.random() * (max - min) + min);\n}\n\nexport interface JackpotInfo {\n    jackpotId: string;\n    jackpotAmount: number;\n   \n    level: number;\n}\nexport interface JackpotMessage {\n    jackpotId: string;\n    message: string;\n}\n\nexport interface BetInfo {\n    betId: string;\n    betAmount: number;\n    jackpotInfos: JackpotInfo[];\n}\n\nexport interface JoinGameModel<T> {\n    betInfos: BetInfo[];\n    currentBetInfo: BetInfo;\n    allJackpotInfos : {[key:string]: JackpotInfo};\n    playerState: T;\n}\n\nexport interface JPHistory {\n    session: string,\n    time: number,\n    wonUser: string,\n    win: number,\n    type: string\n}\n\nexport interface BetHistory { \n    session: string,\n    time: number,\n    betUnit: number,\n    lineBet: number,\n    totalBet: number,\n    totalWin: number, \n    lineWin: number,\n    spinData:string[]\n}\n\n// export interface PlayerData1009 {\n//     state: number\n//     betId: string\n//     normalGameMatrix: string[]\n//     betDenom: number\n//     isFinish: boolean\n//     gameNum: string\n//     data: Data\n//     idx: number\n//     bonusGameRemain: number\n//     bonusGameTotal: number\n//     totalWinAmount: number\n//     normalPayLines: NormalPayLine[]\n//     normalWinAmount: number\n//     freeGameRemain: number\n//     freeGameTotal: number\n//     freeGameMatrix: string[]\n//     freeWinAmount: number\n//     freeGamePaylines: FreeGamePayline[]\n//     jackpotPayLine: string[]\n// }\nexport interface PlayerData1009 {\n    datas: any[]\n    info: any\n    isFinish: boolean\n}\n\nexport interface Data {\n    scatterCountNormal: number\n    normalMatrixOrigin: string[]\n    multiplierBonus: number\n    scatterCountFree: number\n    freeMatrixOrigin: string[]\n}\n\nexport interface NormalPayLine {\n    psc: string\n    pwa: number\n    pwrc: number\n    pwl: number\n    pm: number\n}\n\nexport interface FreeGamePayline {\n    psc: string\n    pwa: number\n    pwrc: number\n    pwl: number\n    pm: number\n}\n\nexport interface StartGameData1009 {\n    allJackpotInfos: { [key: string]: JackpotInfo }\n    betInfos: BetInfo[]\n    currentBetInfo: CurrentBetInfo\n    playerState: PlayerData1009\n}\n\nexport interface BetInfo {\n    betId: string\n    betAmount: number\n    betDenom: number\n    jackpotInfos: JackpotInfo[]\n}\n\nexport interface CurrentBetInfo {\n    betId: string\n    betAmount: number\n    betDenom: number\n    jackpotInfos: JackpotInfo[]\n}\n\nexport interface PopupInfoMessage {\n    type: 'info' | 'close-game',\n    message: string,\n}"]}