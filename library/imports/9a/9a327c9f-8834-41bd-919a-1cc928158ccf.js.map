{"version":3,"sources":["assets\\Script\\GameManager\\Slot45-GameManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import EventEmitter = require('events');\r\n\r\nimport joinGameData from './Slot45-JoinGameData';\r\nimport spinGameData from './Slot45-SpinGameData2';\r\n\r\ndeclare global {\r\n    // eslint-disable-next-line no-var\r\n    var CHEAT_IDX: number;\r\n    // eslint-disable-next-line no-var\r\n    var CURRENT_IDX_SPIN_DATA: number;\r\n}\r\n\r\nglobalThis.CHEAT_IDX = -1;\r\n\r\nexport const GAME_MANAGER_EVENT = {\r\n    'START_GAME_SUCCESS' : 'start-game-success',\r\n    'NORMAL_GAME_RESULT' : 'normal-game-result',\r\n    'FREE_GAME_RESULT' : 'free-game-result',\r\n    'BONUS_GAME_RESULT' : 'bonus-game-result',\r\n\r\n    'JACKPOT_UPDATE': 'jackpot-update',\r\n    'JACKPOT_SHOW_MULTIPLE': 'jackpot_show_multiple',\r\n    'JACKPOT_HIDE_MULTIPLE' : 'jackpot_hide_multiple',\r\n    'PLAYER_MONEY_UPDATE' : 'player-money-update',\r\n    \r\n    'ERROR' : 'error',\r\n    'POPUP_INFO_MESSAGE' : 'popup-info-message',\r\n}\r\n\r\nexport class GameManager1009 {\r\n    protected _emitter: EventEmitter;\r\n    protected jackpotData: {[key:string]: JackpotInfo};\r\n    protected jackpotDataOrigin: {[key:string]: JackpotInfo};\r\n    protected jackpotMessage: {[key:string]: JackpotMessage};\r\n    protected playerMoney: number;\r\n    \r\n    protected currentSpinData: PlayerData1009[];\r\n    protected currentBetInfo: BetInfo;\r\n\r\n    static instance: GameManager1009 = null;\r\n    static getInstance(){\r\n        if(GameManager1009.instance === null){\r\n            GameManager1009.instance =  new GameManager1009();\r\n        }\r\n        return GameManager1009.instance;\r\n    }\r\n\r\n    constructor () {\r\n        this._emitter = new EventEmitter();\r\n\r\n        this.jackpotData = joinGameData.allJackpotInfos;\r\n        this.jackpotDataOrigin = JSON.parse(JSON.stringify(joinGameData.allJackpotInfos));\r\n        this.jackpotMessage = JSON.parse(JSON.stringify(joinGameData.message));\r\n        this.currentBetInfo = joinGameData.currentBetInfo;\r\n\r\n        this.playerMoney = 1000000;\r\n    }\r\n\r\n    registerEvent(event: string, listener: (...args: unknown[]) => void) {\r\n        this._emitter.on(event, listener);\r\n    }\r\n\r\n    removeAllListeners(event: string) {\r\n        this._emitter.removeAllListeners(event);\r\n    }\r\n\r\n    removeAllEvent() {\r\n        this._emitter.removeAllListeners();\r\n    }\r\n\r\n    removeListener(event: string, listener: (...args: unknown[]) => void) {\r\n        this._emitter.removeListener(event, listener);\r\n    }\r\n\r\n    startGame() {\r\n        const lastSpinData = this.getLastSpinData();\r\n\r\n        if (lastSpinData.idxSpinData >= 0) {\r\n            CHEAT_IDX = lastSpinData.idxSpinData;\r\n            this.currentSpinData = this.getNextCurrentSpinData();\r\n            this.currentSpinData.splice(0, this.currentSpinData.length - lastSpinData.lenRemainData - 1);\r\n            CHEAT_IDX = -1;\r\n            joinGameData.playerState = this.currentSpinData.splice(0,1)[0];\r\n        }\r\n\r\n\r\n        setTimeout(() => {\r\n            this._emitter.emit(GAME_MANAGER_EVENT.START_GAME_SUCCESS, joinGameData)\r\n        }, random(100, 500));\r\n    }\r\n\r\n    normalSpin(betId: string) {\r\n        this.showMessageJackpot();\r\n        // if (random(1, 100) <= 50)\r\n        // {\r\n        //     this.showMessageJackpot();\r\n        // }\r\n        // else\r\n        // {\r\n        //     this.hideMessageJackpot();\r\n        // }\r\n        //if (!this.currentSpinData || this.currentSpinData.length === 0) {\r\n            const foundBetInfo = joinGameData.betInfos.find((betInfo) => {\r\n                return betInfo.betId == betId;\r\n            })\r\n\r\n            this.currentBetInfo = foundBetInfo;\r\n\r\n            this.currentSpinData = this.getNextCurrentSpinData();\r\n            this.plusJackpot();\r\n            this.plusPlayerMoney(-foundBetInfo.betAmount)\r\n            setTimeout(() => {\r\n                const resultSpin: PlayerData1009 = this.currentSpinData.splice(0,1)[0];\r\n\r\n                this.checkWinJackpot(resultSpin);\r\n\r\n                this._emitter.emit(GAME_MANAGER_EVENT.NORMAL_GAME_RESULT, resultSpin);\r\n                this.storeLastSpinData(CURRENT_IDX_SPIN_DATA, this.currentSpinData.length);\r\n\r\n                this.checkFinishSession(resultSpin);\r\n            }, random(100, 500));\r\n\r\n        // } else {\r\n        //     setTimeout(() => {\r\n        //         this._emitter.emit(GAME_MANAGER_EVENT.ERROR, {code: 400});\r\n        //     }, random(100, 500));\r\n        // }\r\n    }\r\n\r\n    freeSpin() {\r\n        if (!this.currentSpinData || this.currentSpinData.length === 0) {\r\n            setTimeout(() => {\r\n                this._emitter.emit(GAME_MANAGER_EVENT.ERROR, {code: 400});\r\n            }, random(100, 500));\r\n        } else {\r\n            setTimeout(() => {\r\n                const resultSpin = this.currentSpinData.splice(0,1)[0];\r\n\r\n                this.checkWinJackpot(resultSpin);\r\n\r\n                this._emitter.emit(GAME_MANAGER_EVENT.FREE_GAME_RESULT, resultSpin);\r\n                this.storeLastSpinData(CURRENT_IDX_SPIN_DATA, this.currentSpinData.length);\r\n\r\n                this.checkFinishSession(resultSpin);\r\n            }, random(100, 500));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param item: 1-12\r\n     */\r\n    bonusPlay(item: number) {\r\n        if (!this.currentSpinData || this.currentSpinData.length === 0) {\r\n            setTimeout(() => {\r\n                this._emitter.emit(GAME_MANAGER_EVENT.ERROR, {code: 400});\r\n            }, random(100, 500));\r\n        } else {\r\n            console.log('bonusPlay with item:', item);\r\n            setTimeout(() => { // bonus increasement index\r\n                const resultSpin = this.currentSpinData.splice(0,1)[0];\r\n                this._emitter.emit(GAME_MANAGER_EVENT.BONUS_GAME_RESULT, resultSpin);\r\n                this.storeLastSpinData(CURRENT_IDX_SPIN_DATA, this.currentSpinData.length);\r\n\r\n                this.checkFinishSession(resultSpin);\r\n            }, random(100, 500));\r\n        }\r\n    }\r\n\r\n    getJPHistory(from: number, size: number) : Promise<{\r\n        data: JPHistory[],\r\n        from: number,\r\n        size: number,\r\n        total: number,\r\n    }> {\r\n        const jpHistoryList: JPHistory[] = [];\r\n\r\n        var types = ['Nổ Hũ','Thăng lớn'];\r\n     \r\n        for (let i = 0; i < size; i++) {\r\n            jpHistoryList.push({\r\n                session: `#${2000 - (i + from)}`,\r\n                time: Date.now() - (i + from) * 3600 * 1000,\r\n                wonUser: `Nguyen van A${i + from}`,     \r\n                win: 50000000 + random(100000, 10000000),\r\n                type: types[Math.floor(Math.random() * types.length)]\r\n            })\r\n        }\r\n\r\n        const resultHistory: {\r\n            data: JPHistory[],\r\n            from: number,\r\n            size: number,\r\n            total: number,\r\n        } = {\r\n            from,\r\n            size,\r\n            total: 200,\r\n            data: jpHistoryList,\r\n        };\r\n        return Promise.resolve(resultHistory);\r\n    }\r\n\r\n    getBetHistory(from: number,size: number): Promise<{\r\n        data: BetHistory[],\r\n        from: number,\r\n        size: number,\r\n        total: number,\r\n    }>{\r\n        const betHistoryList: BetHistory[] = [];\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            const betUnit = joinGameData.betInfos[random(0,5)].betAmount;\r\n            const lineBet = 20;\r\n            betHistoryList.push(\r\n                { \r\n                    session: `#${2000 - (i + from)}`,\r\n                    time: Date.now() - (i + from) * 3600 * 1000, \r\n                    betUnit, \r\n                    lineBet, \r\n                    totalBet: betUnit * lineBet, \r\n                    totalWin: random(100000, 10000000), \r\n                    lineWin: random(0, lineBet),\r\n                    spinData: [\"King\", \"King\", \"King\", \"King\", \"King\",\r\n                        \"King\", \"King\", \"King\", \"King\", \"King\",\r\n                        \"King\", \"King\", \"King\", \"King\", \"King\"]\r\n                }\r\n            )\r\n        }\r\n\r\n        const resultHistory: {\r\n            data: BetHistory[],\r\n            from: number,\r\n            size: number,\r\n            total: number,\r\n        } = {\r\n            from,\r\n            size,\r\n            total: 200,\r\n            data: betHistoryList,\r\n        };\r\n        return Promise.resolve(resultHistory);\r\n    }\r\n\r\n    getPlayerMoney(): number {\r\n        return this.playerMoney;\r\n    }\r\n\r\n    private checkWinJackpot(playerData: PlayerData1009) {\r\n        // if (playerData.info.jackpotPayLine && playerData.info.jackpotPayLine && playerData.info.jackpotPayLine.length > 0) {\r\n        //     this.resetJackpot();\r\n        // }\r\n    }\r\n\r\n    private checkFinishSession(playerData: PlayerData1009) {\r\n        if (playerData.isFinish) {\r\n            var win = playerData.datas[playerData.datas.length - 1].content.win;\r\n            console.warn('checkFinishSession: ', win);\r\n            if (win > 0) {\r\n                this.plusPlayerMoney(win);\r\n            }\r\n        }\r\n    }\r\n\r\n    private plusPlayerMoney(money: number) {\r\n        this.playerMoney += money;\r\n        this._emitter.emit(GAME_MANAGER_EVENT.PLAYER_MONEY_UPDATE, this.playerMoney);\r\n    }\r\n\r\n    private storeLastSpinData(idxSpinData: number, lenRemainData: number) {\r\n        localStorage.setItem('idxSpinData', idxSpinData.toString());\r\n        localStorage.setItem('lenRemainData', lenRemainData.toString());\r\n    }\r\n\r\n    private getLastSpinData(): {idxSpinData: number, lenRemainData: number} {\r\n        const idxSpinData = localStorage.getItem('idxSpinData') || '-1';\r\n        const lenRemainData = localStorage.getItem('lenRemainData') || '0';\r\n\r\n        return {\r\n            idxSpinData: parseInt(idxSpinData),\r\n            lenRemainData: parseInt(lenRemainData),\r\n        }\r\n    }\r\n\r\n    private getNextCurrentSpinData(): PlayerData1009[] {\r\n        var fakeDatas = spinGameData;\r\n        const idx = CHEAT_IDX >= 0 && CHEAT_IDX < fakeDatas.length ? CHEAT_IDX : random(0, fakeDatas.length-1);\r\n        globalThis.CURRENT_IDX_SPIN_DATA = idx;\r\n        return JSON.parse(JSON.stringify(fakeDatas[idx].data));\r\n    }\r\n\r\n    private plusJackpot() {\r\n        this.currentBetInfo.jackpotInfos.forEach(({jackpotId}) => {\r\n            this.jackpotData[jackpotId].jackpotAmount += 100;\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this._emitter.emit(GAME_MANAGER_EVENT.JACKPOT_UPDATE, JSON.parse(JSON.stringify(this.jackpotData)));\r\n        }, 3000)\r\n    }\r\n\r\n    private showMessageJackpot()\r\n    {\r\n        setTimeout(() => {\r\n            this._emitter.emit(GAME_MANAGER_EVENT.JACKPOT_SHOW_MULTIPLE, JSON.parse(JSON.stringify(this.jackpotMessage)));\r\n        }, 300)\r\n    }\r\n\r\n    private hideMessageJackpot()\r\n    {\r\n        setTimeout(() => {\r\n            this._emitter.emit(GAME_MANAGER_EVENT.JACKPOT_HIDE_MULTIPLE, JSON.parse(JSON.stringify(this.jackpotMessage)));\r\n        }, 300)\r\n    }\r\n\r\n    private resetJackpot() {\r\n        this.currentBetInfo.jackpotInfos.forEach(({jackpotId}) => {\r\n            this.jackpotData[jackpotId] = JSON.parse(JSON.stringify(this.jackpotDataOrigin[jackpotId]));\r\n        })\r\n\r\n        setTimeout(() => {\r\n            this._emitter.emit(GAME_MANAGER_EVENT.JACKPOT_UPDATE, JSON.parse(JSON.stringify(this.jackpotData)));\r\n        }, 300)\r\n    }\r\n}\r\n\r\nfunction random(min: number, max: number) {\r\n    return Math.round(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport interface JackpotInfo {\r\n    jackpotId: string;\r\n    jackpotAmount: number;\r\n   \r\n    level: number;\r\n}\r\nexport interface JackpotMessage {\r\n    jackpotId: string;\r\n    message: string;\r\n}\r\n\r\nexport interface BetInfo {\r\n    betId: string;\r\n    betAmount: number;\r\n    jackpotInfos: JackpotInfo[];\r\n}\r\n\r\nexport interface JoinGameModel<T> {\r\n    betInfos: BetInfo[];\r\n    currentBetInfo: BetInfo;\r\n    allJackpotInfos : {[key:string]: JackpotInfo};\r\n    playerState: T;\r\n}\r\n\r\nexport interface JPHistory {\r\n    session: string,\r\n    time: number,\r\n    wonUser: string,\r\n    win: number,\r\n    type: string\r\n}\r\n\r\nexport interface BetHistory { \r\n    session: string,\r\n    time: number,\r\n    betUnit: number,\r\n    lineBet: number,\r\n    totalBet: number,\r\n    totalWin: number, \r\n    lineWin: number,\r\n    spinData:string[]\r\n}\r\n\r\n// export interface PlayerData1009 {\r\n//     state: number\r\n//     betId: string\r\n//     normalGameMatrix: string[]\r\n//     betDenom: number\r\n//     isFinish: boolean\r\n//     gameNum: string\r\n//     data: Data\r\n//     idx: number\r\n//     bonusGameRemain: number\r\n//     bonusGameTotal: number\r\n//     totalWinAmount: number\r\n//     normalPayLines: NormalPayLine[]\r\n//     normalWinAmount: number\r\n//     freeGameRemain: number\r\n//     freeGameTotal: number\r\n//     freeGameMatrix: string[]\r\n//     freeWinAmount: number\r\n//     freeGamePaylines: FreeGamePayline[]\r\n//     jackpotPayLine: string[]\r\n// }\r\nexport interface PlayerData1009 {\r\n    datas: any[]\r\n    info: any\r\n    isFinish: boolean\r\n}\r\n\r\nexport interface Data {\r\n    scatterCountNormal: number\r\n    normalMatrixOrigin: string[]\r\n    multiplierBonus: number\r\n    scatterCountFree: number\r\n    freeMatrixOrigin: string[]\r\n}\r\n\r\nexport interface NormalPayLine {\r\n    psc: string\r\n    pwa: number\r\n    pwrc: number\r\n    pwl: number\r\n    pm: number\r\n}\r\n\r\nexport interface FreeGamePayline {\r\n    psc: string\r\n    pwa: number\r\n    pwrc: number\r\n    pwl: number\r\n    pm: number\r\n}\r\n\r\nexport interface StartGameData1009 {\r\n    allJackpotInfos: { [key: string]: JackpotInfo }\r\n    betInfos: BetInfo[]\r\n    currentBetInfo: CurrentBetInfo\r\n    playerState: PlayerData1009\r\n}\r\n\r\nexport interface BetInfo {\r\n    betId: string\r\n    betAmount: number\r\n    betDenom: number\r\n    jackpotInfos: JackpotInfo[]\r\n}\r\n\r\nexport interface CurrentBetInfo {\r\n    betId: string\r\n    betAmount: number\r\n    betDenom: number\r\n    jackpotInfos: JackpotInfo[]\r\n}\r\n\r\nexport interface PopupInfoMessage {\r\n    type: 'info' | 'close-game',\r\n    message: string,\r\n}"]}