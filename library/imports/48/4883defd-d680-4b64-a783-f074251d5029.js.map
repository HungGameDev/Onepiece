{"version":3,"sources":["assets\\Script\\base\\animation\\Slot45-animation-provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAyD,+CAAY;IAArE;QAAA,qEASC;QANG,mBAAa,GAAsB,EAAE,CAAC;;IAM1C,CAAC;IAJa,4CAAM,GAAhB;QACI,6BAA6B,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9E,CAAC;IAJD;QADC,QAAQ,CAAC,EAAE,CAAC,YAAY,CAAC;sEACY;IAHrB,2BAA2B;QAD/C,OAAO;OACa,2BAA2B,CAS/C;IAAD,kCAAC;CATD,AASC,CATwD,EAAE,CAAC,SAAS,GASpE;kBAToB,2BAA2B;AAWhD;IAAA;QAEI,oBAAe,GAAqB,EAAE,CAAC;IA4B3C,CAAC;IA1BiB,sCAAQ,GAAtB;QACI,IAAI,CAAC,6BAA6B,CAAC,QAAQ;YAC3C,6BAA6B,CAAC,QAAQ,GAAG,IAAI,6BAA6B,EAAE,CAAC;QAC7E,OAAO,6BAA6B,CAAC,QAAQ,CAAC;IAClD,CAAC;IAEM,oDAAY,GAAnB,UAAoB,eAAkC;QAAtD,iBAIC;QAHG,eAAe,CAAC,OAAO,CAAC,UAAA,IAAI;YACxB,KAAI,CAAC,eAAe,CAAC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;QACxD,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,oDAAY,GAAnB,UAAoB,GAAW;QAE3B,IAAI,GAAG,IAAI,IAAI,EAAE;YACb,EAAE,CAAC,IAAI,CAAC,oCAAoC,EAAE,GAAG,CAAC,CAAC;YACnD,OAAO,IAAI,CAAC;SACf;QACD,OAAQ,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IACnD,CAAC;IAGO,8CAAM,GAAd,UAAe,IAAY;QAEvB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IAChE,CAAC;IACL,oCAAC;AAAD,CA9BA,AA8BC,IAAA;AA9BY,sEAA6B","file":"","sourceRoot":"/","sourcesContent":["const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class G1009AnimationProviderActor extends cc.Component {\r\n\r\n    @property(sp.SkeletonData)\r\n    listAnimation: sp.SkeletonData[] = [];\r\n\r\n    protected onLoad(): void {\r\n        G1009AnimationProviderManager.Instance().SetAniamtion(this.listAnimation);\r\n    }\r\n\r\n}\r\n\r\nexport class G1009AnimationProviderManager{\r\n    private static instance: G1009AnimationProviderManager;\r\n    dictSpriteFrame: cc.SpriteFrame[] = [];\r\n\r\n    public static Instance() {\r\n        if (!G1009AnimationProviderManager.instance)\r\n        G1009AnimationProviderManager.instance = new G1009AnimationProviderManager();\r\n        return G1009AnimationProviderManager.instance;\r\n    }\r\n\r\n    public SetAniamtion(_animationDatas: sp.SkeletonData[]) {\r\n        _animationDatas.forEach(anim => { \r\n            this.dictSpriteFrame[this.getKey(anim.name)] = anim;\r\n        });    \r\n    }\r\n\r\n    public GetAnimation(key: string)\r\n    {\r\n        if (key == null) {\r\n            cc.warn('Get sprite frame with invalid key:', key);\r\n            return null;\r\n        }\r\n        return  this.dictSpriteFrame[this.getKey(key)];\r\n    }\r\n\r\n\r\n    private getKey(name: string)\r\n    {\r\n        return name.toLowerCase().replace(new RegExp('-', 'g'), '');\r\n    }\r\n}\r\n"]}