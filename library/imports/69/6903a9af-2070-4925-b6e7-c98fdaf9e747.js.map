{"version":3,"sources":["assets\\Script\\UI\\provider\\Slot45-sprite-frame-provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAuD,6CAAY;IAAnE;QAAA,qEASC;QANG,kBAAY,GAAqB,EAAE,CAAC;;IAMxC,CAAC;IAJW,0CAAM,GAAb;QACI,gCAAgC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC7E,CAAC;IAJD;QADC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC;mEACW;IAHnB,yBAAyB;QAD7C,OAAO;OACa,yBAAyB,CAS7C;IAAD,gCAAC;CATD,AASC,CATsD,EAAE,CAAC,SAAS,GASlE;kBAToB,yBAAyB;AAW9C;IAAA;QAGI,oBAAe,GAAqB,EAAE,CAAC;IA4B3C,CAAC;IA1BiB,yCAAQ,GAAtB;QACI,IAAI,CAAC,gCAAgC,CAAC,QAAQ;YAC1C,gCAAgC,CAAC,QAAQ,GAAG,IAAI,gCAAgC,EAAE,CAAC;QACvF,OAAO,gCAAgC,CAAC,QAAQ,CAAC;IACrD,CAAC;IAEM,mDAAQ,GAAf,UAAgB,aAA+B;QAA/C,iBAIC;QAHG,aAAa,CAAC,OAAO,CAAC,UAAA,KAAK;YACvB,KAAI,CAAC,eAAe,CAAC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;QAC1D,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,mDAAQ,GAAf,UAAgB,GAAW;QAEvB,IAAI,GAAG,IAAI,IAAI,EAAE;YACb,EAAE,CAAC,IAAI,CAAC,oCAAoC,EAAE,GAAG,CAAC,CAAC;YACnD,OAAO,IAAI,CAAC;SACf;QACD,OAAQ,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IACnD,CAAC;IAGO,iDAAM,GAAd,UAAe,IAAY;QAEvB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IAChE,CAAC;IACL,uCAAC;AAAD,CA/BA,AA+BC,IAAA;AA/BY,4EAAgC","file":"","sourceRoot":"/","sourcesContent":["const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Slot45SpriteProviderActor extends cc.Component {\r\n\r\n    @property(cc.SpriteFrame)\r\n    spriteFrames: cc.SpriteFrame[] = [];\r\n\r\n     public onLoad(): void {\r\n         Slot45SpriteProviderManagerActor.Instance().SetFrame(this.spriteFrames);\r\n    }\r\n  \r\n}\r\n\r\nexport class Slot45SpriteProviderManagerActor{\r\n\r\n    private static instance: Slot45SpriteProviderManagerActor;\r\n    dictSpriteFrame: cc.SpriteFrame[] = [];\r\n\r\n    public static Instance() {\r\n        if (!Slot45SpriteProviderManagerActor.instance)\r\n            Slot45SpriteProviderManagerActor.instance = new Slot45SpriteProviderManagerActor();\r\n        return Slot45SpriteProviderManagerActor.instance;\r\n    }\r\n\r\n    public SetFrame(_spriteFrames: cc.SpriteFrame[]) {\r\n        _spriteFrames.forEach(frame => { \r\n            this.dictSpriteFrame[this.getKey(frame.name)] = frame;\r\n        });    \r\n    }\r\n\r\n    public GetFrame(key: string)\r\n    {\r\n        if (key == null) {\r\n            cc.warn('Get sprite frame with invalid key:', key);\r\n            return null;\r\n        }\r\n        return  this.dictSpriteFrame[this.getKey(key)];\r\n    }\r\n\r\n\r\n    private getKey(name: string)\r\n    {\r\n        return name.toLowerCase().replace(new RegExp('-', 'g'), '');\r\n    }\r\n}\r\n"]}