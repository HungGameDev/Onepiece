{"version":3,"sources":["assets/Script/UI/freespins/aka-g1009-freespins-retrigger-actor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6FAAkF;AAClF,qFAA8E;AAC9E,8FAA6E;AACvE,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAG5C;IAAqD,2CAAmB;IAAxE;QAAA,qEAwBC;QAtBA,WAAK,GAAgB,IAAI,CAAC;;IAsB3B,CAAC;IArBU,kDAAgB,GAA1B;QACC,OAAO,mCAAmB,CAAC,WAAW,EAAE,CAAC,sBAAsB,EAAE,CAAC;IACnE,CAAC;IAES,oDAAkB,GAA5B;QACC,2CAAiB,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAC1D,CAAC;IAES,6CAAW,GAArB;QAAA,iBAQC;QAPA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;QAChD,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACjC,KAAI,CAAC,kBAAkB,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAChB,KAAI,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IACZ,CAAC;IAES,uCAAK,GAAf;QACC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IAChC,CAAC;IArBD;QADC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC;0DACI;IAFN,uBAAuB;QAD3C,OAAO;OACa,uBAAuB,CAwB3C;IAAD,8BAAC;CAxBD,AAwBC,CAxBoD,yCAAmB,GAwBvE;kBAxBoB,uBAAuB","file":"","sourceRoot":"/","sourcesContent":["import G1009GameController from \"../../base/controller/aka-g1009-game-controller\";\nimport { G1009EventManager } from \"../../base/events/aka-g1009-event-manager\";\nimport G1009FeatureTrigger from \"../feature/aka-g1009-feature-trigger-actor\";\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class G1009FreespinsRetrigger extends G1009FeatureTrigger {\n\t@property(sp.Skeleton)\n\tspine: sp.Skeleton = null;\n\tprotected checkRuleTrigger(): boolean {\n\t\treturn G1009GameController.GetInstance().CheckFreespinRetrigger();\n\t}\n\n\tprotected notifyEnterFeature() {\n\t\tG1009EventManager.GetInstance().notify(\"EnterFreespins\");\n\t}\n\n\tprotected showContent(): void {\n\t\tthis.spine.node.active = true;\n\t\tthis.spine.setAnimation(0, \"Transition\", false);\t\t\n\t\tcc.tween(this.node).delay(5).call(() => {\n\t\t\tthis.notifyEnterFeature();\t\n\t\t}).delay(3).call(() => {\t\n\t\t\tthis.reset();\n\t\t}).start();\n\t}\n\n\tprotected reset(): void {\n\t\tthis.spine.node.active = false;\n\t}\n}"]}